import java.util.*;

class Accio {
    static int LongestSubArraywithSumK(int n, int k, int[] nums) {
        // Map to store (prefixSum -> first index)
        Map<Integer, Integer> map = new HashMap<>();
        int sum = 0;
        int maxLen = 0;

        for (int i = 0; i < n; i++) {
            sum += nums[i];

            // If current sum == k, update maxLen
            if (sum == k) {
                maxLen = i + 1;
            }

            // If (sum - k) exists, subarray between those indices has sum k
            if (map.containsKey(sum - k)) {
                maxLen = Math.max(maxLen, i - map.get(sum - k));
            }

            // Store first occurrence of prefix sum
            if (!map.containsKey(sum)) {
                map.put(sum, i);
            }
        }

        return maxLen;
    }
}

public class Main {
    public static void main(String[] args) throws Throwable {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int nums[] = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = sc.nextInt();
        }
        int ans = Accio.LongestSubArraywithSumK(n, k, nums);
        System.out.println(ans);
    }
}
