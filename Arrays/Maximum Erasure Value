You are given an array of positive integers nums and want to erase a subarray containing unique elements. The score you get by erasing the subarray is equal to the sum of its elements.

Return the maximum score you can get by erasing exactly one subarray.

An array b is called to be a subarray of a if it forms a contiguous subsequence of a, that is, if it is equal to a[l],a[l+1],...,a[r] for some (l,r).

 

Example 1:

Input: nums = [4,2,4,5,6]
Output: 17
Explanation: The optimal subarray here is [2,4,5,6].


class Solution {
    public int maximumUniqueSubarray(int[] nums) {
        Set<Integer> map = new HashSet<>();
        // 🗺️ This is our map to remember the current numbers in our piggy bank

        int left = 0;
        // 👈 This is the left boundary.

        int curr = 0;
        // 💰 This is the money you have at the moment

        int maxSum = 0;
        // 🏆 This is the best amount that we found so far

        for (int right = 0; right < nums.length; right++) {
            // ➡️ We move from left to right side

            while (map.contains(nums[right])) {
                // 🔄 We check if it has a duplicated element in our map
                curr -= nums[left];
                // 🧹 If it have it we reduce from our current number to remove the duplicated
                map.remove(nums[left]);
                // 🗑️ Then, we remove from our map
                left++;
                // ⏪ We reduce our left board
            }

            map.add(nums[right]);
            // ➕ If everything is ok, then we add our number in our map
            curr += nums[right];
            // 💲 And in our total money 🤑

            maxSum = Math.max(maxSum, curr);
            // 🥇 We compare if our money is better than our best score
        }

        return maxSum;
        // 🎁 Returns the maximum sum.
    }
}
