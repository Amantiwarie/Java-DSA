import java.io.*;
import java.util.*;

class Solution {
    public long minSubarraySum(int n, int[] arr) {
        int MOD = (int)1e9 + 7;
        long result = 0;

        Stack<Integer> stack = new Stack<>();
        int[] prev = new int[n];
        int[] next = new int[n];

        // Find Previous Less Element
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {
                stack.pop();
            }
            prev[i] = stack.isEmpty() ? -1 : stack.peek();
            stack.push(i);
        }

        stack.clear();

        // Find Next Less Element (use >= for handling duplicates correctly)
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            next[i] = stack.isEmpty() ? n : stack.peek();
            stack.push(i);
        }

        // Calculate result
        for (int i = 0; i < n; i++) {
            long count = (long)(i - prev[i]) * (next[i] - i) % MOD;
            result = (result + count * arr[i]) % MOD;
        }

        return result;
    }
}
