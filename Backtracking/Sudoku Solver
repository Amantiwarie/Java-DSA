import java.util.*;

public class Main {

  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    char[][] board = new char[9][9];
    for (int i = 0; i < 9; i++) {
      for (int j = 0; j < 9; j++) {
        board[i][j] = sc.next().charAt(0);
      }
    }
    sc.close();

    solveSudoku(board);

    if (isValidSudoku(board)) System.out.println("correct");
    else System.out.println("incorrect");
  }

  public static void solveSudoku(char[][] board) {
    solve(board);
  }

  public static boolean solve(char[][] board) {
    for (int row = 0; row < 9; row++) {
      for (int col = 0; col < 9; col++) {
        if (board[row][col] == '.') {
          for (char num = '1'; num <= '9'; num++) {
            if (isSafe(board, row, col, num)) {
              board[row][col] = num;
              if (solve(board)) return true;
              board[row][col] = '.'; // backtrack
            }
          }
          return false;
        }
      }
    }
    return true; // board is completely filled
  }

  public static boolean isSafe(char[][] board, int row, int col, char num) {
    for (int i = 0; i < 9; i++) {
      if (board[row][i] == num || board[i][col] == num) return false;
    }

    int startRow = row - row % 3;
    int startCol = col - col % 3;

    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
        if (board[startRow + i][startCol + j] == num) return false;
      }
    }

    return true;
  }

  public static boolean isValidSudoku(char[][] board) {
    for (int i = 0; i < 9; i++) {
      boolean[] row = new boolean[9];
      boolean[] col = new boolean[9];
      boolean[] box = new boolean[9];

      for (int j = 0; j < 9; j++) {
        // row check
        if (board[i][j] < '1' || board[i][j] > '9' || row[board[i][j] - '1']) return false;
        row[board[i][j] - '1'] = true;

        // col check
        if (board[j][i] < '1' || board[j][i] > '9' || col[board[j][i] - '1']) return false;
        col[board[j][i] - '1'] = true;

        // 3x3 box check
        int r = 3 * (i / 3) + j / 3;
        int c = 3 * (i % 3) + j % 3;
        if (board[r][c] < '1' || board[r][c] > '9' || box[board[r][c] - '1']) return false;
        box[board[r][c] - '1'] = true;
      }
    }
    return true;
  }
}
