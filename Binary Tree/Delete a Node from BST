import java.util.*;

class Node {
    int val;
    Node left, right;
    Node(int val) {
        this.val = val;
        left = right = null;
    }
}

class BST {
    Node root = null;

    Node insert(Node root, int val) {
        if (root == null) return new Node(val);
        if (val < root.val) root.left = insert(root.left, val);
        else if (val > root.val) root.right = insert(root.right, val);
        return root;
    }

  void print(Node root){
    if (root == null) return;
    System.out.print(root.val + " ");  // visit root
    print(root.left);                  // then left
    print(root.right);                 // then right
}

}

class Solution {
    public Node successor(Node root) {
        while (root.left != null) root = root.left;
        return root;
    }

    public Node deleteNode(Node root, int key) {
        if (root == null) return null;
        if (key < root.val) root.left = deleteNode(root.left, key);
        else if (key > root.val) root.right = deleteNode(root.right, key);
        else {
            if (root.left == null) return root.right;
            if (root.right == null) return root.left;
            Node temp = successor(root.right);
            root.val = temp.val;
            root.right = deleteNode(root.right, temp.val);
        }
        return root;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int n = input.nextInt();
        int k = input.nextInt();
        BST tree = new BST();
        for (int i = 0; i < n; i++) {
            int val = input.nextInt();
            tree.root = tree.insert(tree.root, val);
        }
        Solution sol = new Solution();
        tree.root = sol.deleteNode(tree.root, k);
        tree.print(tree.root);
        System.out.println();
    }
}
