import java.util.*;

class Node {
    int data;
    Node left, right;
    public Node(int item) {
        data = item;
        left = right = null;
    }
}

class BinarySearchTree {
    Node constructBST(int[] arr, int start, int end, Node root) {
        if (start > end)
            return null;
        int mid = (start + end) / 2;

        if (root == null)
            root = new Node(arr[mid]);

        root.left = constructBST(arr, start, mid - 1, root.left);
        root.right = constructBST(arr, mid + 1, end, root.right);

        return root;
    }
}

class Accio {
    int count = 0;
    int result = -1;

    int kthLargest(Node root, int k) {
        reverseInorder(root, k);
        return result;
    }

    void reverseInorder(Node root, int k) {
        if (root == null || count >= k) return;

        // Traverse right subtree first (larger elements)
        reverseInorder(root.right, k);

        count++;
        if (count == k) {
            result = root.data;
            return;
        }

        // Then traverse left subtree
        reverseInorder(root.left, k);
    }
}

public class Main {
    public static void main(String[] args) throws Throwable {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int arr[] = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        // Sort array before constructing balanced BST
        Arrays.sort(arr);

        Node root = null;
        BinarySearchTree bst = new BinarySearchTree();
        root = bst.constructBST(arr, 0, n - 1, root);

        Accio A = new Accio();
        int ans = A.kthLargest(root, k);
        System.out.println(ans);
        sc.close();
    }
}
