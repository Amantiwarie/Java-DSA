import java.util.*;
import java.io.*;

class Node {
    int data;
    Node left;
    Node right;

    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}

class Main {

    static Node treeBuilder(String str) {
        if (str.length() == 0 || str.equals("-1")) { // âœ… FIXED HERE
            return null;
        }

        String ip[] = str.split(" ");
        Node root = new Node(Integer.parseInt(ip[0]));
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        int i = 1;

        while (queue.size() > 0 && i < ip.length) {
            Node currNode = queue.peek();
            queue.remove();

            String currVal = ip[i];
            if (!currVal.equals("-1")) {
                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }
            i++;

            if (i >= ip.length)
                break;

            currVal = ip[i];
            if (!currVal.equals("-1")) {
                currNode.right = new Node(Integer.parseInt(currVal));
                queue.add(currNode.right);
            }
            i++;
        }

        return root;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine());

        while (t > 0) {
            String s = br.readLine();
            Node root = treeBuilder(s);
            Solution g = new Solution();
            int ans = g.largestBSTBTutil(root);
            System.out.println(ans);
            t--;
        }
    }
}

class Solution {

    static class Info {
        int min, max, size;
        boolean isBST;

        Info(int min, int max, int size, boolean isBST) {
            this.min = min;
            this.max = max;
            this.size = size;
            this.isBST = isBST;
        }
    }

    static int maxBST = 0;

    public static int largestBSTBTutil(Node root) {
        maxBST = 0;
        helper(root);
        return maxBST;
    }

    public static Info helper(Node root) {
        if (root == null)
            return new Info(Integer.MAX_VALUE, Integer.MIN_VALUE, 0, true);

        Info left = helper(root.left);
        Info right = helper(root.right);

        // check BST property
        if (left.isBST && right.isBST && root.data > left.max && root.data < right.min) {
            int size = left.size + right.size + 1;
            maxBST = Math.max(maxBST, size);
            return new Info(Math.min(root.data, left.min),
                    Math.max(root.data, right.max),
                    size, true);
        }

        return new Info(Integer.MIN_VALUE, Integer.MAX_VALUE,
                Math.max(left.size, right.size), false);
    }
}
