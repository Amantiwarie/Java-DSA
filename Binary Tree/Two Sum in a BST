Given the root of a binary search tree and an integer k, return true if there exist two elements in the BST such that their sum is equal to k, or false otherwise.
Input: root = [5,3,6,2,4,null,7], k = 9
Output: true


class Solution {
     public boolean findTarget(TreeNode root, int k) {
        Set<Integer> seen = new HashSet<>();
        return inorderTraversal(root, k, seen);
    }

    private boolean inorderTraversal(TreeNode node, int k, Set<Integer> seen) {
        if (node == null) {
            return false;
        }

        if (seen.contains(k - node.val)) {
            return true;
        }
        seen.add(node.val);

        return inorderTraversal(node.left, k, seen) || inorderTraversal(node.right, k, seen);
    }
}
