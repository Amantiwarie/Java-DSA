class info {
    TreeNode node;
    int ht, level;

    info(TreeNode node, int ht, int level) {
        this.node = node;
        this.ht = ht;
        this.level = level;
    }
}

class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        Queue<info> q = new LinkedList<>();
        q.add(new info(root, 0, 0));

        TreeMap<Integer, List<info>> map = new TreeMap<>();

        while (!q.isEmpty()) {
            info temp = q.poll();

            if (map.get(temp.ht) == null) {
                map.put(temp.ht, new ArrayList<>());
            }
            map.get(temp.ht).add(temp);

            if (temp.node.left != null)
                q.add(new info(temp.node.left, temp.ht - 1, temp.level + 1));
            if (temp.node.right != null)
                q.add(new info(temp.node.right, temp.ht + 1, temp.level + 1));
        }

        for (List<info> group : map.values()) {
            Collections.sort(group, (a, b) -> {
                if (a.level == b.level) {
                    return a.node.val - b.node.val;
                } else {
                    return a.level - b.level;
                }
            });

            List<Integer> col = new ArrayList<>();
            for (info i : group) {
                col.add(i.node.val);
            }
            res.add(col);
        }

        return res;
    }
}







//if we have to print the output line wise then follow the below code
import java.util.LinkedList;
import java.util.Queue;
import java.io.*;
import java.util.*;
import java.lang.*;

class TreeNode{
    int data;
    TreeNode left;
    TreeNode right;
    TreeNode(int data){
        this.data = data;
        left=null;
        right=null;
    }
}


 class info{
    TreeNode node;
    int ht;
    info(TreeNode node,int ht){
        this.node=node;
        this.ht=ht;
    }
 }
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        Queue <info> q = new LinkedList<>();
        q.add(new info (root,0));
        TreeMap<Integer,List<Integer>> map = new TreeMap<>();

        while(!q.isEmpty()){
            info temp =q.poll();
            if(map.get(temp.ht)==null){
            map.put(temp.ht,new ArrayList<>());
            }
            map.get(temp.ht).add(temp.node.data);

            if(temp.node.left!=null)q.add((new info(temp.node.left,temp.ht-1)));
            if(temp.node.right!=null)q.add((new info(temp.node.right,temp.ht+1)));

        }
        for (List<Integer> col : map.values()) {
            res.add(col);
        }

        return res;
    }
}

class Main {

    static TreeNode buildTree(String str) {
        if(str.length()==0 || str.charAt(0)=='N')
            return null;

        String ip[] = str.split(" ");
        TreeNode root = new TreeNode(Integer.parseInt(ip[0]));
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        int i = 1;
        while(queue.size()>0 && i < ip.length) {
            TreeNode currNode = queue.peek();
            queue.remove();
            String currVal = ip[i];
            if(!currVal.equals("N")) {
                currNode.left = new TreeNode(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }
            i++;
            if(i >= ip.length)
                break;
            currVal = ip[i];
            if(!currVal.equals("N")) {
                currNode.right = new TreeNode(Integer.parseInt(currVal));
                queue.add(currNode.right);
            }
            i++;
        }
        return root;
    }

    public static void main (String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t=Integer.parseInt(br.readLine());
        while(t > 0){
            String s = br.readLine();
            TreeNode root = buildTree(s);
            Solution ob = new Solution();
            List<List<Integer>> ans = ob.verticalTraversal(root);
            for(int i = 0; i < ans.size(); i++) {
                for(int a : ans.get(i)) {
                    System.out.print(a + " ");
                }
                System.out.println();
            }
           // System.out.println();
            t--;
        }
    }
}
