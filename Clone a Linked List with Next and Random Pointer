import java.util.*;

class Node {
    int data;
    Node next, random;

    Node(int d) {
        data = d;
        next = random = null;
    }
}

class Main {
    public static Node addToTheLast(Node head, Node node) {
        if (head == null) return node;
        Node temp = head;
        while (temp.next != null) temp = temp.next;
        temp.next = node;
        return head;
    }

    public static boolean validation(Node head, Node res) {
        Node temp1 = head, temp2 = res;
        int len1 = 0, len2 = 0;
        while (temp1 != null) {
            len1++;
            temp1 = temp1.next;
        }
        while (temp2 != null) {
            len2++;
            temp2 = temp2.next;
        }
        if (len1 != len2) return false;

        HashMap<Node, Node> map = new HashMap<>();
        temp1 = head;
        temp2 = res;
        while (temp1 != null) {
            if (temp1 == temp2) return false;
            if (temp1.data != temp2.data) return false;
            if ((temp1.random == null && temp2.random != null) || 
                (temp1.random != null && temp2.random == null)) return false;
            if (temp1.random != null && temp2.random != null && temp1.random.data != temp2.random.data) return false;
            map.put(temp1, temp2);
            temp1 = temp1.next;
            temp2 = temp2.next;
        }

        temp1 = head;
        temp2 = res;
        while (temp1 != null) {
            if (temp1.random != null && map.get(temp1.random) != temp2.random) return false;
            temp1 = temp1.next;
            temp2 = temp2.next;
        }
        return true;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Node head = null;
        int n = sc.nextInt();
        int q = sc.nextInt();

        if (n <= 0) {
            System.out.println("1");
            return;
        }

        int a1 = sc.nextInt();
        head = addToTheLast(head, new Node(a1));
        for (int i = 1; i < n; i++) {
            int a = sc.nextInt();
            head = addToTheLast(head, new Node(a));
        }

        for (int i = 0; i < q; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            if (a > n || b > n) continue;

            Node tempA = head, tempB = head;
            for (int j = 1; j < a; j++) tempA = tempA.next;
            for (int j = 1; j < b; j++) tempB = tempB.next;

            tempA.random = tempB;
        }

        Solution g = new Solution();
        Node res = g.copyList(head);

        if (validation(head, res))
            System.out.println("1");
        else
            System.out.println("0");
    }
}

class Solution {
    Node copyList(Node head) {
        if (head == null) return null;

        Node curr = head;
        while (curr != null) {
            Node copy = new Node(curr.data);
            copy.next = curr.next;
            curr.next = copy;
            curr = copy.next;
        }

        curr = head;
        while (curr != null) {
            if (curr.random != null)
                curr.next.random = curr.random.next;
            curr = curr.next.next;
        }

        curr = head;
        Node copyHead = head.next;
        while (curr != null) {
            Node copy = curr.next;
            curr.next = copy.next;
            copy.next = (copy.next != null) ? copy.next.next : null;
            curr = curr.next;
        }

        return copyHead;
    }
}
