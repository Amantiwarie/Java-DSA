
You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.

A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.

Return the minimum effort required to travel from the top-left cell to the bottom-right cell.

Input Format
First line consists of the number of rows rows and the number of columns columns of the matrix respectively

The next rows lines contains columns elements each representing the heights of that cells

Output Format
Print the minimum effort required to travel from the top-left cell to the bottom-right cell.

Example 1
Input

3 3
1 2 2
3 8 2
5 3 5
Output

2
Explanation

The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.

This is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.


import java.util.*;

public class Main {

  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int rows = sc.nextInt(), columns = sc.nextInt();
    int[][] heights = new int[rows][columns];
    for (int i = 0; i < rows; i++) {
      for (int j = 0; j < columns; j++) {
        heights[i][j] = sc.nextInt();
      }
    }
    sc.close();
    System.out.println(minimumEffortPath(heights));
  }

  public static int minimumEffortPath(int[][] heights) {
    int rows = heights.length;
    int cols = heights[0].length;

    int[][] dist = new int[rows][cols];
    for (int[] d : dist) Arrays.fill(d, Integer.MAX_VALUE);
    dist[0][0] = 0;

    PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
    pq.add(new int[] {0, 0, 0}); // effort, row, col

    int[][] directions = {{0,1},{1,0},{0,-1},{-1,0}};

    while (!pq.isEmpty()) {
      int[] curr = pq.poll();
      int effort = curr[0];
      int x = curr[1], y = curr[2];

      if (x == rows - 1 && y == cols - 1) return effort;

      for (int[] dir : directions) {
        int nx = x + dir[0], ny = y + dir[1];
        if (nx >= 0 && ny >= 0 && nx < rows && ny < cols) {
          int currEffort = Math.max(effort, Math.abs(heights[x][y] - heights[nx][ny]));
          if (currEffort < dist[nx][ny]) {
            dist[nx][ny] = currEffort;
            pq.add(new int[] {currEffort, nx, ny});
          }
        }
      }
    }

    return 0; 
  }
}
