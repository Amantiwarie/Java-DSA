
Given a set of N jobs where each jobi has a deadline and profit associated with it.

Each job takes 1 unit of time to complete and only one job can be scheduled at a time. We earn the profit associated with job if and only if the job is completed by its deadline.

Find the number of jobs done and the maximum profit.

Note

Jobs will be given in the form (Jobid, Deadline, Profit) associated with that Job.

Input Format
The fist line of input contains a single integer N.

The next line contains N space separated Jobs in the form Job id, Deadline,Profit

Output Format
Returns the count of jobs and maximum profit as a list or vector of 2 elements.

Example 1
Input

4
1 4 20 2 1 10 3 1 40 4 1 30
Output

2 60
Explanation

Job1 and Job3 can be done with maximum profit of 60 (20+40).









class Solution {
    int[] solve(Job arr[], int n) {
        // Step 1: Sort jobs by descending profit
        Arrays.sort(arr, (a, b) -> b.profit - a.profit);

        // Step 2: Find max deadline
        int maxDeadline = 0;
        for (Job job : arr) {
            maxDeadline = Math.max(maxDeadline, job.deadline);
        }

        // Step 3: Create time slots (1-based indexing)
        boolean[] slots = new boolean[maxDeadline + 1];
        int jobCount = 0, maxProfit = 0;

        // Step 4: Assign jobs to latest available slot
        for (Job job : arr) {
            for (int j = job.deadline; j > 0; j--) {
                if (!slots[j]) {
                    slots[j] = true;
                    jobCount++;
                    maxProfit += job.profit;
                    break;
                }
            }
        }

        return new int[]{jobCount, maxProfit};
    }
}
