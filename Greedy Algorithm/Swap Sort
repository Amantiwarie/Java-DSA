
Given an array A of size n containing elements 1 to n and a boolean array B consisting of n-1 elements. Your task is to find out if A can be sorted by swapping elements.

A[i] can be swapped with A[i+1] if B[i] is 1.

Input Format
The first line of input contains the integer n.

The second line of input contains the array A.

The third line of input contains the boolean array B.

Output Format
The output should be "YES" if the array can be sorted, else "NO".

Example 1
Input

6
1 2 5 3 4 6
0 1 1 1 0
Output

YES
Explanation:

2 5 3 can be sorted to 2 3 5 by swapping 5 and 3.

Hence our final array is 1 2 3 5 4 6 which is sorted.




import java.util.*;

class Solution {
    public static void isASortable(int[] a, int[] b, int n) {
        int start = 0;

        // break into segments wherever B[i] == 0
        for (int i = 0; i < n - 1; i++) {
            if (b[i] == 0) {
                Arrays.sort(a, start, i + 1);
                start = i + 1;
            }
        }
        // sort last segment
        Arrays.sort(a, start, n);

        // âœ… final check across whole array
        for (int i = 1; i < n; i++) {
            if (a[i] < a[i - 1]) {
                System.out.println("NO");
                return;
            }
        }
        System.out.println("YES");
    }
}

public class Main {
    public static void main(String[] args) throws Throwable {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[] b = new int[n - 1];
        for (int i = 0; i < n - 1; i++) {
            b[i] = sc.nextInt();
        }
        Solution.isASortable(a, b, n);
    }
}
