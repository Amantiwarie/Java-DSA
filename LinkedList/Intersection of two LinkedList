import java.util.*;

class Main {
    static Node head1 = null;
    static Node head2 = null;

    static class Node {
        int data;
        Node next;

        Node(int x) {
            data = x;
            next = null;
        }
    }

    // Function to find the intersection node
    static Node intersectingNode(Node headA, Node headB) {
        if(headA==null || headB==null) return null;

        Node t1 =headA;
        Node t2 =headB;

        while(t1!=t2){
            t1 = (t1==null) ? headB : t1.next;
            t2 = (t2==null) ? headA : t2.next;
        }
        return t1;
    }

    // Function to construct linked lists with intersection
    static void formLinkList(int n, int m, int k, int[] a, int[] b) {
        head1 = new Node(a[0]);
        Node temp = head1;
        int i = 1;
        Node need = null;

        // Construct first linked list
        while (i < n) {
            temp.next = new Node(a[i]);
            temp = temp.next;
            if (i == k) need = temp;
            i++;
        }

        // Construct second linked list
        head2 = new Node(b[0]);
        i = 1;
        temp = head2;
        while (i < m) {
            temp.next = new Node(b[i]);
            temp = temp.next;
            i++;
        }

        // Connect second list to intersection node
        temp.next = need;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt(); // Number of test cases

        while (t-- > 0) {
            head1 = null;
            head2 = null;

            int n = sc.nextInt();
            int m = sc.nextInt();
            int k = sc.nextInt();

            int[] a = new int[n];
            int[] b = new int[m];

            for (int i = 0; i < n; i++) a[i] = sc.nextInt();
            for (int i = 0; i < m; i++) b[i] = sc.nextInt();

            formLinkList(n, m, k, a, b);

            Node intersection = intersectingNode(head1, head2);
            System.out.println((intersection != null) ? intersection.data : -1);
        }
        sc.close();
    }
}
