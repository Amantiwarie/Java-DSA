Example 1
Input

1
4
1 2 3 4
Output

1 3 2 4
Explanation:

The Initial Linked List looks like:

1 -> 2 -> 3 -> 4
odd-positioned elements are brought together before all even-positioned elements

The Linked List after the operation looks like this:

1 -> 3 -> 2 -> 4


import java.util.*;

class Main {
    Node head;
    Node temp;

    class Node {
        int data;
        Node next;
        Node(int d) {
            data = d;
            next = null;
        }
    }

    public void oddEvenList(Node head) {
        if (head == null || head.next == null) {
            printList(head);
            return;
        }

        Node odd = head;         // pointer to odd list
        Node even = head.next;   // pointer to even list
        Node evenHead = even;    // to attach at end of odd

        while (even != null && even.next != null) {
            odd.next = even.next;
            odd = odd.next;

            even.next = odd.next;
            even = even.next;
        }

        odd.next = evenHead; // attach even list after odd
        printList(head);
    }

    // helper to print result
    private void printList(Node node) {
        Node curr = node;
        while (curr != null) {
            System.out.print(curr.data + " ");
            curr = curr.next;
        }
        System.out.println();
    }

    public void push(int new_data) {
        if (head == null) {
            head = new Node(new_data);
            temp = head;
            return;
        } else {
            Node new_node = new Node(new_data);
            temp.next = new_node;
            temp = temp.next;
        }
    }

    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            Main ob = new Main();
            int n = sc.nextInt();
            for (int i = 0; i < n; i++) {
                ob.push(sc.nextInt());
            }
            ob.oddEvenList(ob.head);
        }

        sc.close();
    }
}
