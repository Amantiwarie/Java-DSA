import java.util.*;

class Node {
    int data;
    Node next;

    Node(int d) {
        data = d;
        next = null;
    }
}

class Main {
    static void printList(Node n) {
        while (n != null) {
            System.out.print(n.data + " ");
            n = n.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int val = sc.nextInt();
        Node first = new Node(val);
        Node tail = first;
        for (int i = 0; i < n - 1; i++) {
            val = sc.nextInt();
            tail.next = new Node(val);
            tail = tail.next;
        }

        int m = sc.nextInt();
        val = sc.nextInt();
        Node second = new Node(val);
        tail = second;
        for (int i = 0; i < m - 1; i++) {
            val = sc.nextInt();
            tail.next = new Node(val);
            tail = tail.next;
        }

        Solution g = new Solution();
        Node res = g.subtract(first, second);
        printList(res);
    }
}

class Solution {
    static boolean isSmaller(Node l1, Node l2) {
    int len1 = getLength(l1);
    int len2 = getLength(l2);

    if (len1 < len2) return true;
    if (len1 > len2) return false;

    while (l1 != null && l2 != null) {
        if (l1.data < l2.data) return true;
        if (l1.data > l2.data) return false;
        l1 = l1.next;
        l2 = l2.next;
    }

    return false;
}
    static int getLength(Node head) {
    int count = 0;
    while (head != null) {
        count++;
        head = head.next;
    }
    return count;
}
    static Node reverse(Node head) {
        Node prev = null;
        Node curr = head;
        while (curr != null) {
            Node next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    static Node subtract(Node l1, Node l2) {
        
         if (isSmaller(l1, l2)) {
        Node temp = l1;
        l1 = l2;
        l2 = temp;
    }
        Node dummy = new Node(0);
        Node curr = dummy;

        Node node1 = reverse(l1);
        Node node2 = reverse(l2);

        int borrow = 0;
        while (node1 != null || node2 != null) {
            int val1 = (node1 != null) ? node1.data : 0;
            int val2 = (node2 != null) ? node2.data : 0;

            int diff = val1 - val2 - borrow;
            if (diff < 0) {
                borrow = 1;
                diff += 10;
            } else {
                borrow = 0;
            }

            curr.next = new Node(diff);
            curr = curr.next;

            if (node1 != null) node1 = node1.next;
            if (node2 != null) node2 = node2.next;
        }

        Node result = reverse(dummy.next);

        // Remove leading zeros
        while (result != null && result.data == 0) {
            result = result.next;
        }

        return (result != null) ? result : new Node(0);
    }
}
