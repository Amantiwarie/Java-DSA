import java.util.LinkedList;
import java.util.Queue;

class MyStack {
    Queue<Integer> q1;
    Queue<Integer> q2;

    public MyStack() {
        q1 = new LinkedList<>();
        q2 = new LinkedList<>();
    }

    public void push(int x) {
        if (!q1.isEmpty()) {
            q1.add(x);
        } else {
            q2.add(x);
        }
    }

    public int pop() {
        if (!q1.isEmpty()) {
            while (q1.size() > 1) {
                q2.add(q1.remove());
            }
            return q1.remove();
        } else {
            while (q2.size() > 1) {
                q1.add(q2.remove());
            }
            return q2.remove();
        }
    }

    public int top() {
        int res = -1;
        if (!q1.isEmpty()) {
            while (q1.size() > 1) {
                q2.add(q1.remove());
            }
            res = q1.remove();   // get the last element
            q2.add(res);         // reinsert it to maintain order
        } else {
            while (q2.size() > 1) {
                q1.add(q2.remove());
            }
            res = q2.remove();
            q1.add(res);
        }
        return res;
    }

    public boolean empty() {
        return q1.isEmpty() && q2.isEmpty();
    }
}
