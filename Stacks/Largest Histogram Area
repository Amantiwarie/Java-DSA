import java.util.*;
import java.lang.*;
import java.io.*;

class Main {

    
    
	public static void main (String[] args) throws IOException {
	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));	
        long n = Long.parseLong(br.readLine().trim());
        String inputLine[] = br.readLine().trim().split(" ");
        long[] arr = new long[(int)n];
        for(int i=0; i<n; i++)arr[i]=Long.parseLong(inputLine[i]);
        System.out.println(new Solution().maximumArea(arr, n));
	}
}

class Solution {
    public static long maximumArea(long hist[], long n) {
        long maxarea = 0;
        int [] nsr = new int [hist.length];
        int [] nsl = new int [hist.length];

        Stack <Integer> st = new Stack <>();

        for(int i =hist.length-1;i>=0;i--){

            while(!st.isEmpty() && hist[st.peek()] >= hist[i]){
                st.pop();
            }
            if(st.isEmpty()){
                nsr[i]=hist.length;
            }else{
                nsr[i]=st.peek();
            }

            st.push(i);
        }
        st = new Stack<>();
         for(int i =0;i<hist.length;i++){
            while(!st.isEmpty() && hist[st.peek()] >= hist[i]){
                st.pop();
            }
            if(st.isEmpty()){
                nsl[i]=-1;
            }else{
                nsl[i]=st.peek();
            }
            st.push(i);
        }
        for(int i=0;i<hist.length;i++){
            long width = hist[i];
            long area = width * (nsr[i]-nsl[i]-1);
            maxarea=Math.max(area,maxarea);
        }
        return maxarea;
    }
}
