Reorganize String
Given a string s, rearrange the characters of s so that any two adjacent characters are not the same.

Return any possible rearrangement of s or return "" if not possible.

Note

The string that you will return will be checked in the driver code.

Input Format
The first line of input contains a string s.

Output Format
Return any possible rearrangement of s or return "" if not possible.

Example 1
Input

aab
Output

aba
Explanation

aba does not have any 2 adjacent characters same.

Example 2
Input

aaab
Output

Explanation

No possible arrangement can formed from the string aaab, such that no 2 adjacent characters are same.





import java.util.*;

class Solution {
    public String solve(String s) {
        int n = s.length();
        int[] freq = new int[26];

        // count frequency
        for (char c : s.toCharArray()) {
            freq[c - 'a']++;
        }

        // max-heap based on frequency
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> b[1] - a[1]);
        for (int i = 0; i < 26; i++) {
            if (freq[i] > 0) {
                // if frequency too large -> impossible
                if (freq[i] > (n + 1) / 2) return "";
                pq.add(new int[]{i, freq[i]});
            }
        }

        StringBuilder sb = new StringBuilder();

        // build string by taking two most frequent each time
        while (pq.size() >= 2) {
            int[] first = pq.poll();
            int[] second = pq.poll();

            sb.append((char) (first[0] + 'a'));
            sb.append((char) (second[0] + 'a'));

            if (--first[1] > 0) pq.add(first);
            if (--second[1] > 0) pq.add(second);
        }

        // if one character left
        if (!pq.isEmpty()) {
            sb.append((char) (pq.poll()[0] + 'a'));
        }

        return sb.toString();
    }
}
